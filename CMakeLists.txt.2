# Defines wasm_interpreter library
cmake_minimum_required( VERSION 3.5 )
project ( WasmInterpreter )
set( VERSION_MAJOR 0 )
set( VERSION_MINOR 0 )
set( VERSION_PATCH 0 )

#set( CMAKE_CXX_STANDARD 17 )
#set( CXX_STANDARD_REQUIRED ON )

find_package( Gperftools QUIET )
if( GPERFTOOLS_FOUND )
    message( STATUS "Found gperftools; compiling tests with TCMalloc")
    list( APPEND PLATFORM_SPECIFIC_LIBS tcmalloc )
endif()

SET( Boost_USE_STATIC_LIBS ON CACHE STRING "ON or OFF" )
IF( WIN32 )
  SET(BOOST_ROOT $ENV{BOOST_ROOT})
  set(Boost_USE_MULTITHREADED ON)
  set(BOOST_ALL_DYN_LINK OFF) # force dynamic linking for all libraries
ENDIF(WIN32)
#FIND_PACKAGE(Boost 1.67 REQUIRED COMPONENTS
FIND_PACKAGE(Boost 1.50 REQUIRED COMPONENTS
    thread
    date_time
    filesystem
    system
    program_options
    signals
    serialization
    chrono
    unit_test_framework
    context
    locale
    iostreams)


set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS} -O3 -std=c++17" ) # -mllvm -use-clf-aa-in-codegen=both" )

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
   if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 7.0)
      set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mllvm -use-cfl-aa-in-codegen=both" )
   endif()
   set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto" )
endif()

if ( APPLE )
   set( CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -O3 -Wall -Wno-deprecated-declarations -mllvm -use-cfl-aa-in-codegen=both" )
   set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto" )
else()
   set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -g" )
   set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libstdc++ -static-libgcc" )
endif()

# generate compile command database for external tools
set (CMAKE_EXPORT_COMPILE_COMMANDS "ON")

message( STATUS "Configuring WasmInterpreter" )
set( CMAKE_C_FLAGS " -Wall -Werror-implicit-function-declaration -Wno-conversion ${CMAKE_C_FLAGS} ${C_DEFINES}" )

file( GLOB wasm_interpreter_sources "${CMAKE_SOURCE_DIR}/src/*.cpp" )
file( GLOB wasm_interpreter_headers "${CMAKE_SOURCE_DIR}/include/eosio/wasm_backend/*.hpp" )

list( APPEND wasm_interpreter_sources ${wasm_interpreter_headers} )
add_library ( wasm_interpreter STATIC ${wasm_interpreter_sources} )

#add_executable( wasm_t ${CMAKE_SOURCE_DIR}/tests/fuzz/fuzz_parser.cpp ${fc} ${wasm_interpreter} ${filesystem} ${chrono} ${date_time})
add_executable( prog ${CMAKE_SOURCE_DIR}/main.cpp )
target_link_libraries( prog wasm_interpreter )
target_include_directories( prog PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include" )

target_include_directories( wasm_interpreter PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include"
                                                    "${Boost_INCLUDE_DIRS}" )
                                                 #target_include_directories( wasm_t PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include"
                                                 #   "${CMAKE_SOURCE_DIR}/fc/include"
                                                 #   "${Boost_INCLUDE_DIRS}" )

add_subdirectory(tests)
#add_subdirectory(tests/fuzz)
