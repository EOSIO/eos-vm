['(assert_return', '(invoke', '"empty"', '(i32.const', '0))', '(i32.const', '22))']
['(assert_return', '(invoke', '"empty"', '(i32.const', '1))', '(i32.const', '22))']
['(assert_return', '(invoke', '"empty"', '(i32.const', '11))', '(i32.const', '22))']
['(assert_return', '(invoke', '"empty"', '(i32.const', '-1))', '(i32.const', '22))']
['(assert_return', '(invoke', '"empty"', '(i32.const', '-100))', '(i32.const', '22))']
['(assert_return', '(invoke', '"empty"', '(i32.const', '0xffffffff))', '(i32.const', '22))']
['(assert_return', '(invoke', '"empty-value"', '(i32.const', '0))', '(i32.const', '33))']
['(assert_return', '(invoke', '"empty-value"', '(i32.const', '1))', '(i32.const', '33))']
['(assert_return', '(invoke', '"empty-value"', '(i32.const', '11))', '(i32.const', '33))']
['(assert_return', '(invoke', '"empty-value"', '(i32.const', '-1))', '(i32.const', '33))']
['(assert_return', '(invoke', '"empty-value"', '(i32.const', '-100))', '(i32.const', '33))']
['(assert_return', '(invoke', '"empty-value"', '(i32.const', '0xffffffff))', '(i32.const', '33))']
['(assert_return', '(invoke', '"singleton"', '(i32.const', '0))', '(i32.const', '22))']
['(assert_return', '(invoke', '"singleton"', '(i32.const', '1))', '(i32.const', '20))']
['(assert_return', '(invoke', '"singleton"', '(i32.const', '11))', '(i32.const', '20))']
['(assert_return', '(invoke', '"singleton"', '(i32.const', '-1))', '(i32.const', '20))']
['(assert_return', '(invoke', '"singleton"', '(i32.const', '-100))', '(i32.const', '20))']
['(assert_return', '(invoke', '"singleton"', '(i32.const', '0xffffffff))', '(i32.const', '20))']
['(assert_return', '(invoke', '"singleton-value"', '(i32.const', '0))', '(i32.const', '32))']
['(assert_return', '(invoke', '"singleton-value"', '(i32.const', '1))', '(i32.const', '33))']
['(assert_return', '(invoke', '"singleton-value"', '(i32.const', '11))', '(i32.const', '33))']
['(assert_return', '(invoke', '"singleton-value"', '(i32.const', '-1))', '(i32.const', '33))']
['(assert_return', '(invoke', '"singleton-value"', '(i32.const', '-100))', '(i32.const', '33))']
['(assert_return', '(invoke', '"singleton-value"', '(i32.const', '0xffffffff))', '(i32.const', '33))']
['(assert_return', '(invoke', '"multiple"', '(i32.const', '0))', '(i32.const', '103))']
['(assert_return', '(invoke', '"multiple"', '(i32.const', '1))', '(i32.const', '102))']
['(assert_return', '(invoke', '"multiple"', '(i32.const', '2))', '(i32.const', '101))']
['(assert_return', '(invoke', '"multiple"', '(i32.const', '3))', '(i32.const', '100))']
['(assert_return', '(invoke', '"multiple"', '(i32.const', '4))', '(i32.const', '104))']
['(assert_return', '(invoke', '"multiple"', '(i32.const', '5))', '(i32.const', '104))']
['(assert_return', '(invoke', '"multiple"', '(i32.const', '6))', '(i32.const', '104))']
['(assert_return', '(invoke', '"multiple"', '(i32.const', '10))', '(i32.const', '104))']
['(assert_return', '(invoke', '"multiple"', '(i32.const', '-1))', '(i32.const', '104))']
['(assert_return', '(invoke', '"multiple"', '(i32.const', '0xffffffff))', '(i32.const', '104))']
['(assert_return', '(invoke', '"multiple-value"', '(i32.const', '0))', '(i32.const', '213))']
['(assert_return', '(invoke', '"multiple-value"', '(i32.const', '1))', '(i32.const', '212))']
['(assert_return', '(invoke', '"multiple-value"', '(i32.const', '2))', '(i32.const', '211))']
['(assert_return', '(invoke', '"multiple-value"', '(i32.const', '3))', '(i32.const', '210))']
['(assert_return', '(invoke', '"multiple-value"', '(i32.const', '4))', '(i32.const', '214))']
['(assert_return', '(invoke', '"multiple-value"', '(i32.const', '5))', '(i32.const', '214))']
['(assert_return', '(invoke', '"multiple-value"', '(i32.const', '6))', '(i32.const', '214))']
['(assert_return', '(invoke', '"multiple-value"', '(i32.const', '10))', '(i32.const', '214))']
['(assert_return', '(invoke', '"multiple-value"', '(i32.const', '-1))', '(i32.const', '214))']
['(assert_return', '(invoke', '"multiple-value"', '(i32.const', '0xffffffff))', '(i32.const', '214))']
['(assert_return', '(invoke', '"large"', '(i32.const', '0))', '(i32.const', '0))']
['(assert_return', '(invoke', '"large"', '(i32.const', '1))', '(i32.const', '1))']
['(assert_return', '(invoke', '"large"', '(i32.const', '100))', '(i32.const', '0))']
['(assert_return', '(invoke', '"large"', '(i32.const', '101))', '(i32.const', '1))']
['(assert_return', '(invoke', '"large"', '(i32.const', '10000))', '(i32.const', '0))']
['(assert_return', '(invoke', '"large"', '(i32.const', '10001))', '(i32.const', '1))']
['(assert_return', '(invoke', '"large"', '(i32.const', '1000000))', '(i32.const', '1))']
['(assert_return', '(invoke', '"large"', '(i32.const', '1000001))', '(i32.const', '1))']
['(assert_return', '(invoke', '"as-if-then"', '(i32.const', '1)', '(i32.const', '6))', '(i32.const', '3))']
['(assert_return', '(invoke', '"as-if-then"', '(i32.const', '0)', '(i32.const', '6))', '(i32.const', '6))']
['(assert_return', '(invoke', '"as-if-else"', '(i32.const', '0)', '(i32.const', '6))', '(i32.const', '4))']
['(assert_return', '(invoke', '"as-if-else"', '(i32.const', '1)', '(i32.const', '6))', '(i32.const', '6))']
['(assert_return', '(invoke', '"as-select-first"', '(i32.const', '0)', '(i32.const', '6))', '(i32.const', '5))']
['(assert_return', '(invoke', '"as-select-first"', '(i32.const', '1)', '(i32.const', '6))', '(i32.const', '5))']
['(assert_return', '(invoke', '"as-select-second"', '(i32.const', '0)', '(i32.const', '6))', '(i32.const', '6))']
['(assert_return', '(invoke', '"as-select-second"', '(i32.const', '1)', '(i32.const', '6))', '(i32.const', '6))']
['(assert_return', '(invoke', '"nested-block-value"', '(i32.const', '0))', '(i32.const', '19))']
['(assert_return', '(invoke', '"nested-block-value"', '(i32.const', '1))', '(i32.const', '17))']
['(assert_return', '(invoke', '"nested-block-value"', '(i32.const', '2))', '(i32.const', '16))']
['(assert_return', '(invoke', '"nested-block-value"', '(i32.const', '10))', '(i32.const', '16))']
['(assert_return', '(invoke', '"nested-block-value"', '(i32.const', '-1))', '(i32.const', '16))']
['(assert_return', '(invoke', '"nested-block-value"', '(i32.const', '100000))', '(i32.const', '16))']
['(assert_return', '(invoke', '"nested-br-value"', '(i32.const', '0))', '(i32.const', '8))']
['(assert_return', '(invoke', '"nested-br-value"', '(i32.const', '1))', '(i32.const', '9))']
['(assert_return', '(invoke', '"nested-br-value"', '(i32.const', '2))', '(i32.const', '17))']
['(assert_return', '(invoke', '"nested-br-value"', '(i32.const', '11))', '(i32.const', '17))']
['(assert_return', '(invoke', '"nested-br-value"', '(i32.const', '-4))', '(i32.const', '17))']
['(assert_return', '(invoke', '"nested-br-value"', '(i32.const', '10213210))', '(i32.const', '17))']
['(assert_return', '(invoke', '"nested-br_if-value"', '(i32.const', '0))', '(i32.const', '17))']
['(assert_return', '(invoke', '"nested-br_if-value"', '(i32.const', '1))', '(i32.const', '9))']
['(assert_return', '(invoke', '"nested-br_if-value"', '(i32.const', '2))', '(i32.const', '8))']
['(assert_return', '(invoke', '"nested-br_if-value"', '(i32.const', '9))', '(i32.const', '8))']
['(assert_return', '(invoke', '"nested-br_if-value"', '(i32.const', '-9))', '(i32.const', '8))']
['(assert_return', '(invoke', '"nested-br_if-value"', '(i32.const', '999999))', '(i32.const', '8))']
['(assert_return', '(invoke', '"nested-br_if-value-cond"', '(i32.const', '0))', '(i32.const', '9))']
['(assert_return', '(invoke', '"nested-br_if-value-cond"', '(i32.const', '1))', '(i32.const', '8))']
['(assert_return', '(invoke', '"nested-br_if-value-cond"', '(i32.const', '2))', '(i32.const', '9))']
['(assert_return', '(invoke', '"nested-br_if-value-cond"', '(i32.const', '3))', '(i32.const', '9))']
['(assert_return', '(invoke', '"nested-br_if-value-cond"', '(i32.const', '-1000000))', '(i32.const', '9))']
['(assert_return', '(invoke', '"nested-br_if-value-cond"', '(i32.const', '9423975))', '(i32.const', '9))']
['(assert_return', '(invoke', '"nested-br_table-value"', '(i32.const', '0))', '(i32.const', '17))']
['(assert_return', '(invoke', '"nested-br_table-value"', '(i32.const', '1))', '(i32.const', '9))']
['(assert_return', '(invoke', '"nested-br_table-value"', '(i32.const', '2))', '(i32.const', '8))']
['(assert_return', '(invoke', '"nested-br_table-value"', '(i32.const', '9))', '(i32.const', '8))']
['(assert_return', '(invoke', '"nested-br_table-value"', '(i32.const', '-9))', '(i32.const', '8))']
['(assert_return', '(invoke', '"nested-br_table-value"', '(i32.const', '999999))', '(i32.const', '8))']
['(assert_return', '(invoke', '"nested-br_table-value-index"', '(i32.const', '0))', '(i32.const', '9))']
['(assert_return', '(invoke', '"nested-br_table-value-index"', '(i32.const', '1))', '(i32.const', '8))']
['(assert_return', '(invoke', '"nested-br_table-value-index"', '(i32.const', '2))', '(i32.const', '9))']
['(assert_return', '(invoke', '"nested-br_table-value-index"', '(i32.const', '3))', '(i32.const', '9))']
['(assert_return', '(invoke', '"nested-br_table-value-index"', '(i32.const', '-1000000))', '(i32.const', '9))']
['(assert_return', '(invoke', '"nested-br_table-value-index"', '(i32.const', '9423975))', '(i32.const', '9))']
['(assert_return', '(invoke', '"nested-br_table-loop-block"', '(i32.const', '1))', '(i32.const', '3))']

BOOST_CHECK(!bkend("type-i32"));

BOOST_CHECK(!bkend("type-i64"));

BOOST_CHECK(!bkend("type-f32"));

BOOST_CHECK(!bkend("type-f64"));

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("type-i32-value")), (uint32_t)1);

BOOST_CHECK_EQUAL(TO_UINT64(*bkend("type-i64-value")), (uint64_t)2);

BOOST_CHECK_EQUAL(TO_F32(*bkend("type-f32-value")), (float)3);

BOOST_CHECK_EQUAL(TO_F64(*bkend("type-f64-value")), (double)4);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("empty", (uint32_t)0)), (uint32_t)22);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("empty", (uint32_t)1)), (uint32_t)22);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("empty", (uint32_t)11)), (uint32_t)22);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("empty", (uint32_t)-1)), (uint32_t)22);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("empty", (uint32_t)-100)), (uint32_t)22);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("empty", (uint32_t)0xffffffff)), (uint32_t)22);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("empty-value", (uint32_t)0)), (uint32_t)33);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("empty-value", (uint32_t)1)), (uint32_t)33);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("empty-value", (uint32_t)11)), (uint32_t)33);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("empty-value", (uint32_t)-1)), (uint32_t)33);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("empty-value", (uint32_t)-100)), (uint32_t)33);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("empty-value", (uint32_t)0xffffffff)), (uint32_t)33);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("singleton", (uint32_t)0)), (uint32_t)22);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("singleton", (uint32_t)1)), (uint32_t)20);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("singleton", (uint32_t)11)), (uint32_t)20);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("singleton", (uint32_t)-1)), (uint32_t)20);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("singleton", (uint32_t)-100)), (uint32_t)20);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("singleton", (uint32_t)0xffffffff)), (uint32_t)20);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("singleton-value", (uint32_t)0)), (uint32_t)32);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("singleton-value", (uint32_t)1)), (uint32_t)33);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("singleton-value", (uint32_t)11)), (uint32_t)33);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("singleton-value", (uint32_t)-1)), (uint32_t)33);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("singleton-value", (uint32_t)-100)), (uint32_t)33);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("singleton-value", (uint32_t)0xffffffff)), (uint32_t)33);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple", (uint32_t)0)), (uint32_t)103);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple", (uint32_t)1)), (uint32_t)102);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple", (uint32_t)2)), (uint32_t)101);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple", (uint32_t)3)), (uint32_t)100);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple", (uint32_t)4)), (uint32_t)104);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple", (uint32_t)5)), (uint32_t)104);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple", (uint32_t)6)), (uint32_t)104);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple", (uint32_t)10)), (uint32_t)104);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple", (uint32_t)-1)), (uint32_t)104);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple", (uint32_t)0xffffffff)), (uint32_t)104);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple-value", (uint32_t)0)), (uint32_t)213);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple-value", (uint32_t)1)), (uint32_t)212);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple-value", (uint32_t)2)), (uint32_t)211);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple-value", (uint32_t)3)), (uint32_t)210);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple-value", (uint32_t)4)), (uint32_t)214);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple-value", (uint32_t)5)), (uint32_t)214);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple-value", (uint32_t)6)), (uint32_t)214);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple-value", (uint32_t)10)), (uint32_t)214);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple-value", (uint32_t)-1)), (uint32_t)214);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("multiple-value", (uint32_t)0xffffffff)), (uint32_t)214);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("large", (uint32_t)0)), (uint32_t)0);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("large", (uint32_t)1)), (uint32_t)1);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("large", (uint32_t)100)), (uint32_t)0);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("large", (uint32_t)101)), (uint32_t)1);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("large", (uint32_t)10000)), (uint32_t)0);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("large", (uint32_t)10001)), (uint32_t)1);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("large", (uint32_t)1000000)), (uint32_t)1);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("large", (uint32_t)1000001)), (uint32_t)1);

BOOST_CHECK(!bkend("as-block-first"));

BOOST_CHECK(!bkend("as-block-mid"));

BOOST_CHECK(!bkend("as-block-last"));

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-block-value")), (uint32_t)2);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-loop-first")), (uint32_t)3);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-loop-mid")), (uint32_t)4);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-loop-last")), (uint32_t)5);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-br-value")), (uint32_t)9);

BOOST_CHECK(!bkend("as-br_if-cond"));

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-br_if-value")), (uint32_t)8);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-br_if-value-cond")), (uint32_t)9);

BOOST_CHECK(!bkend("as-br_table-index"));

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-br_table-value")), (uint32_t)10);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-br_table-value-index")), (uint32_t)11);

BOOST_CHECK_EQUAL(TO_UINT64(*bkend("as-return-value")), (uint64_t)7);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-if-cond")), (uint32_t)2);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-if-then", (uint32_t)1, (uint32_t)6)), (uint32_t)3);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-if-then", (uint32_t)0, (uint32_t)6)), (uint32_t)6);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-if-else", (uint32_t)0, (uint32_t)6)), (uint32_t)4);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-if-else", (uint32_t)1, (uint32_t)6)), (uint32_t)6);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-select-first", (uint32_t)0, (uint32_t)6)), (uint32_t)5);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-select-first", (uint32_t)1, (uint32_t)6)), (uint32_t)5);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-select-second", (uint32_t)0, (uint32_t)6)), (uint32_t)6);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-select-second", (uint32_t)1, (uint32_t)6)), (uint32_t)6);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-select-cond")), (uint32_t)7);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-call-first")), (uint32_t)12);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-call-mid")), (uint32_t)13);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-call-last")), (uint32_t)14);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-call_indirect-first")), (uint32_t)20);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-call_indirect-mid")), (uint32_t)21);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-call_indirect-last")), (uint32_t)22);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-call_indirect-func")), (uint32_t)23);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-local.set-value")), (uint32_t)17);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-local.tee-value")), (uint32_t)1);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-global.set-value")), (uint32_t)1);

BOOST_CHECK_EQUAL(TO_F32(*bkend("as-load-address")), (float)1.7);

BOOST_CHECK_EQUAL(TO_UINT64(*bkend("as-loadN-address")), (uint64_t)30);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-store-address")), (uint32_t)30);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-store-value")), (uint32_t)31);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-storeN-address")), (uint32_t)32);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-storeN-value")), (uint32_t)33);

BOOST_CHECK_EQUAL(TO_F32(*bkend("as-unary-operand")), (float)3.4);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-binary-left")), (uint32_t)3);

BOOST_CHECK_EQUAL(TO_UINT64(*bkend("as-binary-right")), (uint64_t)45);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-test-operand")), (uint32_t)44);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-compare-left")), (uint32_t)43);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-compare-right")), (uint32_t)42);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-convert-operand")), (uint32_t)41);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("as-memory.grow-size")), (uint32_t)40);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-block-value", (uint32_t)0)), (uint32_t)19);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-block-value", (uint32_t)1)), (uint32_t)17);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-block-value", (uint32_t)2)), (uint32_t)16);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-block-value", (uint32_t)10)), (uint32_t)16);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-block-value", (uint32_t)-1)), (uint32_t)16);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-block-value", (uint32_t)100000)), (uint32_t)16);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br-value", (uint32_t)0)), (uint32_t)8);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br-value", (uint32_t)1)), (uint32_t)9);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br-value", (uint32_t)2)), (uint32_t)17);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br-value", (uint32_t)11)), (uint32_t)17);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br-value", (uint32_t)-4)), (uint32_t)17);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br-value", (uint32_t)10213210)), (uint32_t)17);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_if-value", (uint32_t)0)), (uint32_t)17);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_if-value", (uint32_t)1)), (uint32_t)9);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_if-value", (uint32_t)2)), (uint32_t)8);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_if-value", (uint32_t)9)), (uint32_t)8);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_if-value", (uint32_t)-9)), (uint32_t)8);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_if-value", (uint32_t)999999)), (uint32_t)8);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_if-value-cond", (uint32_t)0)), (uint32_t)9);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_if-value-cond", (uint32_t)1)), (uint32_t)8);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_if-value-cond", (uint32_t)2)), (uint32_t)9);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_if-value-cond", (uint32_t)3)), (uint32_t)9);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_if-value-cond", (uint32_t)-1000000)), (uint32_t)9);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_if-value-cond", (uint32_t)9423975)), (uint32_t)9);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_table-value", (uint32_t)0)), (uint32_t)17);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_table-value", (uint32_t)1)), (uint32_t)9);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_table-value", (uint32_t)2)), (uint32_t)8);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_table-value", (uint32_t)9)), (uint32_t)8);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_table-value", (uint32_t)-9)), (uint32_t)8);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_table-value", (uint32_t)999999)), (uint32_t)8);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_table-value-index", (uint32_t)0)), (uint32_t)9);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_table-value-index", (uint32_t)1)), (uint32_t)8);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_table-value-index", (uint32_t)2)), (uint32_t)9);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_table-value-index", (uint32_t)3)), (uint32_t)9);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_table-value-index", (uint32_t)-1000000)), (uint32_t)9);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_table-value-index", (uint32_t)9423975)), (uint32_t)9);

BOOST_CHECK_EQUAL(TO_UINT32(*bkend("nested-br_table-loop-block", (uint32_t)1)), (uint32_t)3);

